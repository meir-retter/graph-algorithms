
Testing algorithms on a directed graph:

DFS, beginning with Node 1:

Node 1: discovery time = 1, finish time = 12, low = 1, predecessor = null
Node 2: discovery time = 2, finish time = 11, low = 2, predecessor = 1
Node 3: discovery time = 3, finish time = 10, low = 3, predecessor = 2
Node 4: discovery time = 4, finish time = 9, low = 4, predecessor = 3
Node 5: discovery time = 5, finish time = 8, low = 5, predecessor = 4
Node 6: discovery time = 6, finish time = 7, low = 6, predecessor = 5

Edge classification:

(1,2): type = TREE
(1,4): type = FORWARD
(4,2): type = BACK
(2,3): type = TREE
(3,4): type = TREE
(5,3): type = BACK
(3,6): type = FORWARD
(5,6): type = TREE
(4,5): type = TREE

BFS, beginning with node 1:

Node 1: discovery time = 0, predecessor = null
Node 2: discovery time = 1, predecessor = 1
Node 3: discovery time = 2, predecessor = 2
Node 4: discovery time = 1, predecessor = 1
Node 5: discovery time = 2, predecessor = 4
Node 6: discovery time = 3, predecessor = 3

Dijkstra, beginning with node 1:

Node 1: discovery time = 0, predecessor = null
Node 2: discovery time = 16, predecessor = 1
Node 3: discovery time = 28, predecessor = 2
Node 4: discovery time = 13, predecessor = 1
Node 5: discovery time = 27, predecessor = 4
Node 6: discovery time = 31, predecessor = 5

Testing the Ford-Fulkerson method for max flow.
The source is node 1. The sink is node n, where n is the number of nodes.

Maximum flow is achieved as follows:

(1,2): flow/capacity = 12/16
(1,4): flow/capacity = 11/13
(4,2): flow/capacity = 0/4
(2,3): flow/capacity = 12/12
(3,4): flow/capacity = 0/9
(5,3): flow/capacity = 7/7
(3,6): flow/capacity = 19/20
(5,6): flow/capacity = 4/4
(4,5): flow/capacity = 11/14




------------------------------------





Testing algorithms on an undirected graph:

DFS, beginning with Node 1:

Node 1: discovery time = 1, finish time = 46, low = 1, predecessor = null
Node 2: discovery time = 2, finish time = 45, low = 1, predecessor = 1
Node 3: discovery time = 3, finish time = 44, low = 1, predecessor = 2
Node 4: discovery time = 4, finish time = 5, low = 1, predecessor = 3
Node 5: discovery time = 7, finish time = 10, low = 6, predecessor = 7
Node 6: discovery time = 8, finish time = 9, low = 6, predecessor = 5
Node 7: discovery time = 6, finish time = 43, low = 6, predecessor = 3
Node 8: discovery time = 11, finish time = 16, low = 6, predecessor = 7
Node 9: discovery time = 12, finish time = 13, low = 6, predecessor = 8
Node 10: discovery time = 14, finish time = 15, low = 14, predecessor = 8
Node 11: discovery time = 18, finish time = 41, low = 17, predecessor = 12
Node 12: discovery time = 17, finish time = 42, low = 17, predecessor = 7
Node 13: discovery time = 19, finish time = 40, low = 17, predecessor = 11
Node 14: discovery time = 20, finish time = 21, low = 17, predecessor = 13
Node 15: discovery time = 25, finish time = 36, low = 22, predecessor = 18
Node 16: discovery time = 22, finish time = 39, low = 22, predecessor = 13
Node 17: discovery time = 23, finish time = 38, low = 22, predecessor = 16
Node 18: discovery time = 24, finish time = 37, low = 22, predecessor = 17
Node 19: discovery time = 28, finish time = 31, low = 27, predecessor = 22
Node 20: discovery time = 26, finish time = 35, low = 22, predecessor = 15
Node 21: discovery time = 29, finish time = 30, low = 27, predecessor = 19
Node 22: discovery time = 27, finish time = 32, low = 27, predecessor = 20
Node 23: discovery time = 33, finish time = 34, low = 33, predecessor = 20


Articulation Points:

3
7
8
12
13
16
20
22

BFS, beginning with node 1:

Node 1: discovery time = 0, predecessor = null
Node 2: discovery time = 1, predecessor = 1
Node 3: discovery time = 1, predecessor = 1
Node 4: discovery time = 1, predecessor = 1
Node 5: discovery time = 3, predecessor = 7
Node 6: discovery time = 3, predecessor = 7
Node 7: discovery time = 2, predecessor = 3
Node 8: discovery time = 3, predecessor = 7
Node 9: discovery time = 3, predecessor = 7
Node 10: discovery time = 4, predecessor = 8
Node 11: discovery time = 4, predecessor = 12
Node 12: discovery time = 3, predecessor = 7
Node 13: discovery time = 5, predecessor = 11
Node 14: discovery time = 4, predecessor = 12
Node 15: discovery time = 8, predecessor = 17
Node 16: discovery time = 6, predecessor = 13
Node 17: discovery time = 7, predecessor = 16
Node 18: discovery time = 8, predecessor = 17
Node 19: discovery time = 9, predecessor = 22
Node 20: discovery time = 7, predecessor = 16
Node 21: discovery time = 9, predecessor = 22
Node 22: discovery time = 8, predecessor = 20
Node 23: discovery time = 8, predecessor = 20

Bridges:
(3,7)
(7,12)
(8,10)
(13,16)
(20,22)
(20,23)

Printing out biconnected components, one at a time:

New biconnected component:
(6,7)
(5,6)
(7,5)
New biconnected component:
(8,10)
New biconnected component:
(9,7)
(8,9)
(7,8)
New biconnected component:
(21,22)
(19,21)
(22,19)
New biconnected component:
(20,22)
New biconnected component:
(20,23)
New biconnected component:
(20,17)
(20,16)
(15,20)
(15,17)
(18,15)
(17,18)
(16,17)
New biconnected component:
(13,16)
New biconnected component:
(14,12)
(13,14)
(11,13)
(12,11)
New biconnected component:
(7,12)
New biconnected component:
(3,7)
New biconnected component:
(4,2)
(4,1)
(3,4)
(3,1)
(2,3)
(1,2)
